package net.mbl.grpcfull.common.util;

import javax.annotation.concurrent.ThreadSafe;
import java.util.concurrent.TimeoutException;
import java.util.function.Supplier;

/**
 * Common utilities shared by all components.
 */
@ThreadSafe
public final class CommonUtils {

    /**
     * Waits for a condition to be satisfied.
     *
     * @param description a description of what causes condition to evaluate to true
     * @param condition   the condition to wait on
     * @throws TimeoutException if the function times out while waiting for the condition to be true
     */
    public static void waitFor(String description, Supplier<Boolean> condition)
            throws InterruptedException, TimeoutException {
        waitFor(description, condition, WaitForOptions.defaults());
    }

    /**
     * Waits for a condition to be satisfied.
     *
     * @param description a description of what causes condition to evaluate to true
     * @param condition   the condition to wait on
     * @param options     the options to use
     * @throws TimeoutException if the function times out while waiting for the condition to be true
     */
    public static void waitFor(String description, Supplier<Boolean> condition,
            WaitForOptions options) throws InterruptedException, TimeoutException {
        waitForResult(description, () -> condition.get() ? true : null, options);
    }

    /**
     * Waits for an operation to return a non-null value with a specified timeout.
     *
     * @param description the description of this operation
     * @param operation   the operation
     * @param options     the options to use
     * @param <T>         the type of the return value
     * @return the first non-null value generated by the operation
     * @throws TimeoutException if the function times out while waiting to get a non-null value
     */
    public static <T> T waitForResult(String description, Supplier<T> operation,
            WaitForOptions options) throws InterruptedException, TimeoutException {
        T t;
        long start = System.currentTimeMillis();
        int interval = options.getInterval();
        int timeout = options.getTimeoutMs();
        while ((t = operation.get()) == null) {
            if (timeout != WaitForOptions.NEVER && System.currentTimeMillis() - start > timeout) {
                throw new TimeoutException("Timed out waiting for " + description + " options: " + options);
            }
            Thread.sleep(interval);
        }
        return t;
    }

    private CommonUtils() {
    } // prevent instantiation
}
